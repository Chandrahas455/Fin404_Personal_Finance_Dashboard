# -*- coding: utf-8 -*-
"""catigrizor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z10-JASoP8CcAKUxyEEhTYXrqicO1j3t
"""

import sqlite3
import json
from typing import List, Dict
import numpy as np
import matplotlib.pyplot as plt

categories = {
    "Transport": ["car", "bus", "train", "plane", "bicycle", "motorcycle", "taxi", "uber", "lyft", "scooter", "skateboard", "rollerblades", "segway", "hoverboard", "unicycle", "rickshaw", "tuk-tuk", "rickshaw", "jeepney", "dolmus", "matatu", "tro-tro", "dala-dala", "pesero", "collectivo", "marshrutka", "minibus", "van", "truck", "lorry", "trailer", "container", "ship", "boat", "ferry", "yacht", "cruise ship", "submarine", "airship", "blimp", "hot air balloon", "rocket", "space shuttle", "satellite"],
    "Food": ["bread", "cereal", "rice", "pasta", "noodles", "meat", "fish", "poultry", "eggs", "dairy", "fruits", "vegetables", "nuts", "seeds", "legumes", "spices", "herbs", "condiments", "sauces", "oils", "vinegars", "sugar", "salt", "pepper", "coffee", "tea", "soda", "juice", "beer", "wine", "liquor", "cigarettes", "tobacco", "candy", "snacks", "ice cream", "frozen food", "canned food", "packaged food", "processed food", "junk food"],
    "Rent and bills": ["rent", "mortgage", "utilities", "electricity", "gas", "water", "trash", "sewer", "cable", "internet", "phone", "cell phone", "insurance", "homeowners insurance", "renters insurance", "car insurance", "health insurance", "life insurance", "disability insurance", "property tax", "income tax", "sales tax", "value-added tax", "luxury tax", "sin tax", "toll", "tariff", "quota", "embargo", "sanction"],
    "Others": []
}

conn = sqlite3.connect('expenses.db')
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS expenses (
        category TEXT PRIMARY KEY,
        total_expense REAL
    )
''')

def load_expenses() -> Dict[str, float]:
    cursor.execute('SELECT category, total_expense FROM expenses')
    rows = cursor.fetchall()
    loaded_expenses = {category: total_expense for category, total_expense in rows}

    for category in categories.keys():
        loaded_expenses.setdefault(category, 0.0)

    return loaded_expenses

def save_expenses(expenses: Dict[str, float]):
    cursor.execute('DELETE FROM expenses')

    for category, total_expense in expenses.items():
        cursor.execute('INSERT INTO expenses VALUES (?, ?)', (category, total_expense))

    conn.commit()

def jaccard_similarity(str1: str, str2: str) -> float:
    set1 = set(str1.lower().split())
    set2 = set(str2.lower().split())
    intersection = len(set1.intersection(set2))
    union = len(set1.union(set2))
    return intersection / union if union != 0 else 0

def classify_and_update_jaccard(input_str: str, categories: Dict[str, List[str]], expenses: Dict[str, float]):
    try:
        input_tokens = input_str.lower().split()

        max_similarity = 0
        assigned_category = None

        for category, keywords in categories.items():
            similarity = jaccard_similarity(' '.join(input_tokens), ' '.join(keywords))
            if similarity > max_similarity:
                max_similarity = similarity
                assigned_category = category

        if assigned_category and max_similarity > 0:
            amount = next((float(token) for token in input_tokens if token.replace('.', '', 1).isdigit()), 0)
            expenses[assigned_category] += amount
            print(f"Expense of {amount} added to category '{assigned_category}'. Total expenses in '{assigned_category}': {expenses[assigned_category]}")

        else:
            amount = next((float(token) for token in input_tokens if token.replace('.', '', 1).isdigit()), 0)
            expenses['Others'] += amount
            print(f"Expense of {amount} added to category 'Others'. Total expenses in 'Others': {expenses['Others']}")


        save_expenses(expenses)

        user_verification = input("Was the categorization correct? (yes/no): ").lower()
        if user_verification == "no":
            print("Choose a category:")
            for idx, category_name in enumerate(categories.keys(), start=1):
                print(f"{idx}. {category_name}")

            chosen_category_index = int(input("Enter the index of the correct category: ")) - 1
            if 0 <= chosen_category_index < len(categories):
                correct_category = list(categories.keys())[chosen_category_index]
                expenses[correct_category] += amount
                print(f"Expense moved to category '{correct_category}'. Total expenses in '{correct_category}': {expenses[correct_category]}")
            else:
                print("Invalid category index. No changes made.")

        print("\nTotal Expenses:")
        for category, total_expense in expenses.items():
            print(f"{category}: {total_expense}")

        user_continue = input("\nDo you wanna continue chatting with me? (Yes/ no): ").lower()
        return user_continue == "yes"

    except ValueError:
        print("Invalid input format. Please provide a valid input.")

expenses = load_expenses()

while True:
    user_input = input("Enter expense details: ")
    continue_chatting = classify_and_update_jaccard(user_input, categories, expenses)
    if not continue_chatting:
        print("\nHere's the user's budget graph:")

        categories_list = list(expenses.keys())
        total_expenses_list = list(expenses.values())

        colors = plt.cm.viridis(np.linspace(0, 1, len(categories_list)))

        plt.bar(categories_list, total_expenses_list, color=colors)
        plt.xlabel('Categories')
        plt.ylabel('Total Expenses')
        plt.title('Total Expenses by Category')

        plt.legend(categories_list, title='Categories', bbox_to_anchor=(1, 1), loc='upper left')

        plt.grid(axis='y', linestyle='--', alpha=0.7)

        plt.xticks(rotation=45, ha='right')


        plt.tight_layout()
        plt.show()
        save_expenses(expenses)

        conn.close()
        break